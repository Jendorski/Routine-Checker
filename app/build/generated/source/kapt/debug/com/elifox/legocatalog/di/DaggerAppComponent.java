// Generated by Dagger (https://dagger.dev).
package com.elifox.legocatalog.di;

import android.app.Application;
import com.kudi.test.routinechecks.dagger.activities.MainActivity;
import com.kudi.test.routinechecks.dagger.fragments.NextUpFragment;
import com.kudi.test.routinechecks.dagger.fragments.RoutinesFragment;
import com.kudi.test.routinechecks.dagger.fragments.SettingsFragment;
import com.kudi.test.routinechecks.utils.RoutineApp;
import dagger.android.AndroidInjector;
import dagger.android.DaggerActivity_MembersInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private DaggerAppComponent(Application application) {

    initialize(application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final Application application) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
  }

  @Override
  public void inject(RoutineApp application) {
    injectRoutineApp(application);}

  private RoutineApp injectRoutineApp(RoutineApp instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class MainActivitySubcomponentFactory implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeThemeFragment.RoutinesFragmentSubcomponent.Factory> routinesFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLegoSetsFragment.SettingsFragmentSubcomponent.Factory> settingsFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeLegoSetFragment.NextUpFragmentSubcomponent.Factory> nextUpFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(RoutinesFragment.class, (Provider) routinesFragmentSubcomponentFactoryProvider).put(SettingsFragment.class, (Provider) settingsFragmentSubcomponentFactoryProvider).put(NextUpFragment.class, (Provider) nextUpFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.routinesFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeThemeFragment.RoutinesFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeThemeFragment.RoutinesFragmentSubcomponent.Factory get(
            ) {
          return new RoutinesFragmentSubcomponentFactory();}
      };
      this.settingsFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLegoSetsFragment.SettingsFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLegoSetsFragment.SettingsFragmentSubcomponent.Factory get(
            ) {
          return new SettingsFragmentSubcomponentFactory();}
      };
      this.nextUpFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeLegoSetFragment.NextUpFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeLegoSetFragment.NextUpFragmentSubcomponent.Factory get(
            ) {
          return new NextUpFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class RoutinesFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeThemeFragment.RoutinesFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeThemeFragment.RoutinesFragmentSubcomponent create(
          RoutinesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new RoutinesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class RoutinesFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeThemeFragment.RoutinesFragmentSubcomponent {
      private RoutinesFragmentSubcomponentImpl(RoutinesFragment arg0) {

      }

      @Override
      public void inject(RoutinesFragment arg0) {
        injectRoutinesFragment(arg0);}

      private RoutinesFragment injectRoutinesFragment(RoutinesFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class SettingsFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLegoSetsFragment.SettingsFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLegoSetsFragment.SettingsFragmentSubcomponent create(
          SettingsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SettingsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SettingsFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLegoSetsFragment.SettingsFragmentSubcomponent {
      private SettingsFragmentSubcomponentImpl(SettingsFragment arg0) {

      }

      @Override
      public void inject(SettingsFragment arg0) {
        injectSettingsFragment(arg0);}

      private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        return instance;
      }
    }

    private final class NextUpFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeLegoSetFragment.NextUpFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeLegoSetFragment.NextUpFragmentSubcomponent create(
          NextUpFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new NextUpFragmentSubcomponentImpl(arg0);
      }
    }

    private final class NextUpFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeLegoSetFragment.NextUpFragmentSubcomponent {
      private NextUpFragmentSubcomponentImpl(NextUpFragment arg0) {

      }

      @Override
      public void inject(NextUpFragment arg0) {
      }
    }
  }
}
